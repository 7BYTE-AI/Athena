//////////////////////// Athena common buffers ////////////////////////

layout(std140, set = 1, binding = 0) uniform u_CameraData
{
	mat4 View;
    mat4 Projection;
    mat4 ViewProjection;
    mat4 RotationView;
    vec3 Position;
    float NearClip;
    float FarClip;
} u_Camera;

layout(std140, set = 1, binding = 1) uniform u_RendererData
{
    float Exposure;
    float Gamma;
    float EnvironmentIntensity;
    float EnvironmentLOD;
    int DebugShadowCascades;
} u_Renderer;

struct DirectionalLight
{
    vec4 Color;
    vec3 Direction;
    float Intensity;
    float LightSize;
	int CastShadows;
};

struct PointLight
{
    vec4 Color;
    vec3 Position;
    float Intensity;
    float Radius;
    float FallOff;
};

layout(std430, set = 1, binding = 2) readonly buffer u_LightData
{
    DirectionalLight g_DirectionalLights[MAX_DIRECTIONAL_LIGHT_COUNT];
    int g_DirectionalLightCount;

    PointLight g_PointLights[MAX_POINT_LIGHT_COUNT];
    int g_PointLightCount;
};

layout(std430, set = 1, binding = 3) readonly buffer u_BonesData
{
    mat4 g_Bones[MAX_NUM_BONES_PER_MESH * MAX_NUM_ANIMATED_MESHES];
};

mat4 GetBonesTransform(uint bonesOffset, ivec4 boneIDs, vec4 weights)
{
    mat4 bonesTransform = g_Bones[bonesOffset + boneIDs[0]] * weights[0];
    for(int i = 1; i < MAX_NUM_BONES_PER_VERTEX; ++i)
    {
        bonesTransform += g_Bones[bonesOffset + boneIDs[i]] * weights[i];
    }

    return bonesTransform;
}
