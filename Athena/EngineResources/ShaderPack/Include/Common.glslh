/////////////////////////////////////////////////////////////////////////
//////////////////////////// Utillity Functions ////////////////////////////
/////////////////////////////////////////////////////////////////////////

#define PI 3.14159265358979323846


vec3 GetWorldDirectionFromCubeCoords(ivec3 unnormalizedTexCoords, vec2 faceSize)
{
    vec2 texCoords = vec2(unnormalizedTexCoords.xy) / faceSize;
    int cubeFace = unnormalizedTexCoords.z;

    texCoords = texCoords * 2.0 - 1.0;

    vec3 direction;
    switch(cubeFace)
    {
        case 0: direction = vec3(1.0, texCoords.y, -texCoords.x); break;
        case 1: direction = vec3(-1.0, texCoords.y, texCoords.x); break;
        case 2: direction = vec3(texCoords.x, -1.0, texCoords.y); break;
        case 3: direction = vec3(texCoords.x, 1.0, -texCoords.y); break;
        case 4: direction = vec3(texCoords.x, texCoords.y, 1.0); break;
        case 5: direction = vec3(-texCoords.x, texCoords.y, -1.0); break;
        default: direction = vec3(0.0);
    }

    return normalize(direction);
}

vec3 WorldPositionFromDepth(vec2 texCoords, float depth, mat4 invProj, mat4 invView)
{
    vec4 clipSpace = vec4(texCoords * 2.0 - 1.0, depth, 1.0);
    vec4 viewPos = invProj * clipSpace;
    viewPos /= viewPos.w;
    vec3 worldPos = vec3(invView * viewPos);

    return worldPos;
}

vec3 ViewPositionFromDepth(vec2 texCoords, float depth, mat4 invProj)
{
    vec4 clipSpace = vec4(texCoords * 2.0 - 1.0, depth, 1.0);
    vec4 viewPos = invProj * clipSpace;
    viewPos /= viewPos.w;

    return viewPos.xyz;
}

float LinearizeDepth(float depth, float zNear, float zFar)
{
    return zNear * zFar / (zFar - depth * (zFar - zNear));
}

float Random(vec2 seed)
{
    return fract(sin(dot(seed, vec2(12.9898,78.233))) * 43758.5453);
}

/////////////////////////////////////////////////////////////////////////
//////////////////////// Importance Sampling GGX ////////////////////////
/////////////////////////////////////////////////////////////////////////

float RadicalInverse_VdC(uint bits)
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 Hammersley(uint i, uint N)
{
    return vec2(float(i) / float(N), RadicalInverse_VdC(i));
}

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
    float a = roughness * roughness;
	
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
	
    // from spherical coordinates to cartesian coordinates
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;
	
    // from tangent-space vector to world-space sample vector
    vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);
	
    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}
