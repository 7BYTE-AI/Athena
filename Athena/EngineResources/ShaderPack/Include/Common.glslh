/////////////////////////////////////////////////////////////////////////
//////////////////////////// Utillity Functions ////////////////////////////
/////////////////////////////////////////////////////////////////////////

#define PI 3.14159265358979323846


vec3 GetWorldDirectionFromCubeCoords(ivec3 unnormalizedTexCoords, vec2 faceSize)
{
    vec2 texCoords = vec2(unnormalizedTexCoords.xy) / faceSize;
    int cubeFace = unnormalizedTexCoords.z;

    texCoords = texCoords * 2.0 - 1.0;

    vec3 direction;
    switch(cubeFace)
    {
        case 0: direction = vec3(1.0, texCoords.y, -texCoords.x); break;
        case 1: direction = vec3(-1.0, texCoords.y, texCoords.x); break;
        case 2: direction = vec3(texCoords.x, -1.0, texCoords.y); break;
        case 3: direction = vec3(texCoords.x, 1.0, -texCoords.y); break;
        case 4: direction = vec3(texCoords.x, texCoords.y, 1.0); break;
        case 5: direction = vec3(-texCoords.x, texCoords.y, -1.0); break;
        default: direction = vec3(0.0);
    }

    return normalize(direction);
}

vec3 WorldPositionFromDepth(vec2 texCoords, float depth, mat4 invProj, mat4 invView)
{
    vec4 clipSpace = vec4(texCoords * 2.0 - 1.0, depth, 1.0);
    vec4 viewPos = invProj * clipSpace;
    viewPos /= viewPos.w;
    vec3 worldPos = vec3(invView * viewPos);

    return worldPos;
}

vec3 ViewPositionFromDepth(vec2 texCoords, float depth, mat4 invProj)
{
    vec4 clipSpace = vec4(texCoords * 2.0 - 1.0, depth, 1.0);
    vec4 viewPos = invProj * clipSpace;
    viewPos /= viewPos.w;

    return viewPos.xyz;
}

float LinearizeDepth(float depth, float zNear, float zFar)
{
    return zNear * zFar / (zFar - depth * (zFar - zNear));
}

float Random(vec2 seed)
{
    return fract(sin(dot(seed, vec2(12.9898,78.233))) * 43758.5453);
}
